import { Injectable } from "@angular/core";
import { HttpClient } from "@angular/common/http";
import { Parser, Builder } from "xml2js";
import { OtdsService } from "<%= srPath %>/otds.service";
import { ConfigService } from "<%= crPath %>/config.service";
import { Utils } from "<%= srPath %>/utils";
import { Subject } from "rxjs";
import { <%= inMsg %>, <%= outMsg %>, metadata } from "./<%= typesFile %>";

@Injectable({
    providedIn: "root"
})

export class <%= classify(name) %>Service {
    private util: Utils = new Utils(metadata);

    private xmlParser = new Parser({
        attrkey: "meta",
        explicitArray: false,
        validator: this.util.validator.bind(this.util)
    });

    constructor(private http: HttpClient, private otds: OtdsService, private configService: ConfigService) { }

    callService(param: <%= inMsg %>): Subject<<%= outMsg %>> {
        let o: Subject<<%= outMsg %>> = new Subject();
        if (!this.otds.otdsTicket) {
            throw new Error("User not logged in");
        }
        let req = {
            "SOAP:Envelope": {
                "meta": {
                    "xmlns:SOAP": "http://schemas.xmlsoap.org/soap/envelope/"
                },
                "SOAP:Header": {
                    "OTAuthentication": {
                        "meta": {
                            "xmlns": "urn:api.bpm.opentext.com"
                        },
                        "AuthenticationToken": this.otds.otdsTicket.ticket
                    }
                },
                "SOAP:Body": {
                    "GetOrganizationsOfUser": {
                        "meta": {
                            "xmlns": "http://schemas.cordys.com/UserManagement/1.0/User"
                        },
                        ...param
                    }
                }
            }
        };
        let builder = new Builder({ attrkey: "meta" });
        let xml = builder.buildObject(req);
        let endpoint = this.configService.config.GATEWAY_URL+'?organization='+this.configService.config.ORG_DN;
        this.http.post(endpoint, xml, { responseType: "text" }).subscribe((data => {
            this.xmlParser.parseString(data, (err, result) => {
                let g: any = result["SOAP:Envelope"]?.["SOAP:Body"]?.["GetOrganizationsOfUserResponse"];
                o.next(g);
                o.complete();
            });
        }));
        return o;
    }
}
